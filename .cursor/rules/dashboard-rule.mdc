## Проект: Финансовый офлайн-дашборд (single-file app + assets)

### Назначение
- Локальный офлайн‑дашборд: импорт банковской выписки из XML, просмотр агрегатов/графиков, добавление кастомных записей, экспорт данных.
- Работа строго локально: без сетевых запросов. Открываем HTML-файл в браузере (Chrome/Edge), интернет не требуется.

### Технологии
- Языки: HTML, CSS, JavaScript (ES2020+). Без фреймворков и bundlers.
- Хранение: `localStorage` (plain JSON) под ключом `ofb_vault`.
- Графики: Canvas 2D (см. `assets/charts.js`).
- Парсинг XML: `DOMParser` + эвристики, поддержка BOM/UTF‑16/UTF‑8 (см. `assets/xml.js`).

### Точки входа и структура
- Основная страница: `index.html`
  - Подключает стили и скрипты из `assets/` и содержит основной шаблон разметки/рендеринга.
- Справка: `help.html` (открывается из хедера кнопкой «Справка»)
- Каталог данных примеров: `Data/` (например, `Data/test.xml`)

#### assets/
- `assets/styles.css` — тема, сетка, кнопки, адаптив и базовые утилиты CSS.
- `assets/help.js` — функция `helpHTML()` для блока «Как пользоваться» (вставляется в главный контент).
- `assets/xml.js` — импорт выписки из XML:
  - `readFileTextSmart(file)` — чтение файла с определением BOM и декодированием UTF‑16LE/BE/UTF‑8.
  - Логика извлечения дат, сумм (credit/debit), описаний, попытка определить валюту.
- `assets/charts.js` — отрисовка графиков: столбчатая (доход/расход), линейная (итог), пончик (категории).
- `assets/app.js` — UI-утилиты: таблица всех операций, модальное окно «Добавить запись…».

### Основные разделы UI
- Сайдбар:
  - «Файлы»: импорт/экспорт хранилища (plain JSON), экспорт агрегатов, «Сохранить сейчас».
  - «Импорт выписки (XML)»: дропзона, выбор файла, сводка, кнопка «Импортировать».
  - «Операции»: таблица всех операций + кнопка «Добавить запись…» (модал: дата, сумма, описание, категория; для корректировок используем категорию «Корректировки»).
- Контент:
  - Карточка «Как пользоваться» (из `helpHTML()`), стат-блоки, 3 графика, блок «Недавние операции».

### Модель данных (localStorage → plain JSON)
```
{
  currency: string,              // 'BGN' | 'EUR' | 'USD' | 'UAH'
  transactions: Array<{
    id: string,
    date: 'YYYY-MM-DD',
    desc: string,
    amount: number,              // + доход, − расход
    category?: string|null,
    source: 'import'|'manual'
  }>,
  adjustments: { [month: string]: number },
  createdAt: ISODate,
  version: number
}
```

### Импорт XML — эвристики
- Поиск контейнера транзакций по наличию дочерних тегов суммы/даты.
- Дата: `bookingDate`, `valueDate`, `posted`, `postDate`, и похожие.
- Сумма: `amount`, `creditAmount`, `debitAmount`, `entryAmount`, и производные.
- Знак суммы: по полям credit/debit, индикаторам `CR/DR`, префиксу «−».
- Валюта: из атрибутов `ccy|currency|curr` или близких тегов.
- Поддержка файлов в UTF‑16LE/BE и UTF‑8 (BOM‑sniffing, `readFileTextSmart`).

### Экспорт
- Хранилище: plain JSON (зашифрованный режим отключён по умолчанию).
- Агрегаты: `{ currency, generatedAt, data:[{month,income,expense,net,count}] }`.

### CSP и офлайн‑ограничения
- CSP (в `index.html`) разрешает: `default-src 'self' blob: data:`; `style-src 'self' 'unsafe-inline'`; `script-src 'self' 'unsafe-inline'`.
- Никаких сетевых запросов. Файлы пользователь выбирает вручную (drag&drop/выбор), авто‑чтение каталогов запрещено политикой браузера.

### Правила разработки
- Языки: только HTML/CSS/JS. Не добавлять сборщики, фреймворки и внешние CDN.
- Индентация: сохранять существующую (пробелы), не изменять стиль в несвязанных местах.
- Код‑стиль JS:
  - Понятные имена функций/переменных, ранний возврат, обработка краевых случаев.
  - Без лишних глобалов; новые функции класть в соответствующие файлы в `assets/`.
  - Комментарии — по существу «зачем», а не «как».
- UI/UX:
  - Все `input/select/textarea` и `input[type=file]` тянут на 100% ширины родителя.
  - Сетки используют `minmax(0,1fr)`; дочерние — `min-width:0` для предотвращения ломки колонок.
  - Кнопки для файлов всегда парные: «Выбрать …» и «Очистить выбор» одинаковой высоты.

- ### Навигация/файлы
- Главная: `index.html`.
- Справка: `help.html` (с кнопкой возврата назад).
- Assets подключаются тегами `<link rel="stylesheet" href="assets/styles.css">`, `<script src="assets/*.js">`.

### Задачи на будущее (опционально)
- Переключаемый режим шифрования (AES‑GCM + PBKDF2), переключатель: «без пароля / с паролем».
- Редактирование/удаление строк в таблице «Операции».
- Авто‑категоризация по шаблонам.